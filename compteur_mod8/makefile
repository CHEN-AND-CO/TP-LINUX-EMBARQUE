# Makefile by KÃ©vin Le Torc'h

EXE_1 = compteur_mod8
INCLUDES = -Iinclude							# include folders
CFLAGS = -g -Wall -Wextra -Os -std=c++17		# Compiler flags
LDFLAGS = -lm -ansi	-Llib						# Libs for all systems
DELETE_CMD = rm	-f								# Default remove command
empty:=

ifeq ($(TARGET),)
	COMPILER = g++
else ifeq ($(TARGET),rpi1)
	COMPILER = arm-linux-gnueabihf-g++
	CFLAGS += -mcpu=arm1176jzf-s -mfloat-abi=hard -mfpu=vfp -mtune=arm1176jzf-s
	EXTENSION = -rpi1
else ifeq ($(TARGET),rpi2)
	COMPILER = arm-linux-gnueabihf-g++
	CFLAGS += -mcpu=cortex-a7 -mfloat-abi=hard -mfpu=neon-vfpv4 -mtune=cortex-a7
	EXTENSION = -rpi2
else ifeq ($(TARGET),rpi3)
	COMPILER = arm-linux-gnueabihf-g++
	CFLAGS += -mcpu=cortex-a53 -mfloat-abi=hard -mfpu=neon-fp-armv8 -mneon-for-64bits -mtune=cortex-a53
	EXTENSION = -rpi3
else ifeq ($(TARGET),beaglebb)
	COMPILER = arm-linux-gnueabihf-g++
	CFLAGS += -mcpu=cortex-a8 -mfloat-abi=hard -mfpu=neon -mtune=cortex-a8
	EXTENSION = -beaglebb
endif

ifeq ($(CC),cc)									# If CC set to "cc"				
	CC = $(COMPILER)							# Forced to default compiler
endif
ifeq ($(CC),)									# If no c or c++ compiler set
	CC = $(COMPILER)							# Forced to default compiler
endif


##########		Detect OS		##########

ifeq ($(OS),Windows_NT)     					# Windows OS
    detected_OS := Windows
else
    detected_OS := $(shell uname) 				# Unix Based OS
endif

# Apply specific parameters for Windows
ifeq ($(detected_OS),Windows)
	DELETE_CMD = del /F
	ifeq ($(TARGET),)
		EXTENSION = .exe
	endif
endif


SRC = $(wildcard src/*.cpp)
NOM = $(basename $(notdir $(SRC)))
OBJ = $(addprefix obj/,$(addsuffix .o, $(NOM)))

ifeq ($(detected_OS),Windows)
	DELETE_OBJ = $(subst /,"\", $(OBJ))
else 
	DELETE_OBJ = $(OBJ)
endif


all: $(EXE_1)$(EXTENSION)									# Build all executables

rebuild: remake												# Clean and build all executables

remake: clean $(EXE_1)$(EXTENSION)							# Same as rebuild

$(EXE_1)$(EXTENSION): $(OBJ)
	$(CC) $(CFLAGS) $(OBJ) $(LDFLAGS) -o $(EXE_1)$(EXTENSION)

# Build all the .o files
obj/%.o: src/%.cpp
	$(CC) $(CFLAGS) -c $< $(INCLUDES) -o $@
	
# Remove all files generated by compilation (executables included)
clean:
	$(DELETE_CMD) $(DELETE_OBJ) $(EXE_1)$(EXTENSION) *.gch

# Remove all files generated by compilation (except executables)
clear:
	$(DELETE_CMD) $(DELETE_OBJ) *.gch

run: $(EXE_1)$(EXTENSION)
	./$(EXE_1)$(EXTENSION)